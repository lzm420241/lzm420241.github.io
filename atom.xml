<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端那点事</title>
  <subtitle>记录前端笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lzm420241.github.io/"/>
  <updated>2018-05-09T06:26:23.000Z</updated>
  <id>https://lzm420241.github.io/</id>
  
  <author>
    <name>Zhiming Li</name>
    <email>lzm420241@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>svn命令基本使用及原理</title>
    <link href="https://lzm420241.github.io/2018/05/08/svn/"/>
    <id>https://lzm420241.github.io/2018/05/08/svn/</id>
    <published>2018-05-08T11:23:58.000Z</published>
    <updated>2018-05-09T06:26:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="svn常用命令"><a href="#svn常用命令" class="headerlink" title="svn常用命令"></a>svn常用命令</h3><p>1.<strong>将文件checkout到本地目录</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn checkout path (path是服务器上的目录) 简写：svn co path</div></pre></td></tr></table></figure></p>
<p>2.<strong>往版本库添加新文件</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn add file</div></pre></td></tr></table></figure></p>
<p>3.<strong>将改动的文件提交到版本库</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svm commit -m <span class="string">"message"</span> [-N][--no-unlock] PATH (如果选择了保持锁，就使用--no-unlock开关) 简写：svn ci -m <span class="string">"message"</span> PATH</div></pre></td></tr></table></figure></p>
<p>4.<strong>加锁／解锁</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn lock -m <span class="string">"lockMessage"</span> [--force] PATH  svn unlock PATH</div></pre></td></tr></table></figure></p>
<p>5.<strong>更新到某个版本</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn update -r m path 简写：svn up</div></pre></td></tr></table></figure></p>
<p>6.<strong>查看文件或者目录状态</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn status [-v (查看文件及子目录状态)] path  简写：svn st</div></pre></td></tr></table></figure></p>
<p>7.<strong>删除文件</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn delete path -m <span class="string">"message"</span> 简写：svn (del, remove, rm)</div></pre></td></tr></table></figure></p>
<p>8.<strong>查看日志</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn <span class="built_in">log</span> path</div></pre></td></tr></table></figure></p>
<p>9.<strong>查看文件详细信息</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn info path</div></pre></td></tr></table></figure></p>
<p>10.<strong>比较差异</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn diff path   简写：svn di</div></pre></td></tr></table></figure></p>
<p>11.<strong>将两个版本之间的差异合并到当前文件</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn merge -r m:n path</div></pre></td></tr></table></figure></p>
<p>12.<strong>svn帮助</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn <span class="built_in">log</span> path</div></pre></td></tr></table></figure></p>
<h3 id="svn基本原理"><a href="#svn基本原理" class="headerlink" title="svn基本原理"></a>svn基本原理</h3><p>1.<strong>svn里面三个概念：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1.工作拷贝：一个SVN的工作拷贝是用户机器的一个本地目录，保存着一些文件和目录，你可以任意编辑其中的文件，在你提交之前你所做的编辑不会上传到SVN与他人所作的修改进行合并。</div><div class="line"></div><div class="line">2.基准版本：SVN会在每个工作拷贝的一个特定位置保存该工作拷贝最后一次提交时的文件及目录情况，这些文件及目录就称为<span class="string">"基准版本"</span>。</div><div class="line"></div><div class="line">3.Head版本：SVN服务器中的最新版本</div><div class="line"></div><div class="line">注意：如果Head版本比你所编辑的本地工作拷贝版本（指的是基准版本）新的话，而且如果你做了修改，当你Commit的时候会提示有冲突产生，这时你update的时候会将冲突显示出来。如果没有做修改，Commit之后会提示你版本低，需要update成最新版本，此时本地工作拷贝会变成update后的最新的版本。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;svn常用命令&quot;&gt;&lt;a href=&quot;#svn常用命令&quot; class=&quot;headerlink&quot; title=&quot;svn常用命令&quot;&gt;&lt;/a&gt;svn常用命令&lt;/h3&gt;&lt;p&gt;1.&lt;strong&gt;将文件checkout到本地目录&lt;/strong&gt;&lt;br&gt;    &lt;figure
    
    </summary>
    
      <category term="知识点入门学习" scheme="https://lzm420241.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="svn" scheme="https://lzm420241.github.io/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>未来6个月的规划</title>
    <link href="https://lzm420241.github.io/2018/04/23/life/2/"/>
    <id>https://lzm420241.github.io/2018/04/23/life/2/</id>
    <published>2018-04-23T07:53:25.000Z</published>
    <updated>2018-04-23T11:40:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2018-Q2-Q3总体规划"><a href="#2018-Q2-Q3总体规划" class="headerlink" title="2018 Q2-Q3总体规划"></a>2018 Q2-Q3总体规划</h3><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1.用户极致体验</div><div class="line">	要求：</div><div class="line">		1.[页面的流畅性](http://ask.dcloud.net.cn/article/25)</div><div class="line">		2.页面的美观度</div><div class="line">		3.页面的加载性能</div><div class="line">2.前端工具化及工程化</div><div class="line">	发展：</div><div class="line">		1.原始阶段：在原始api方面扩充，将会催生大量的tools</div><div class="line">		2.发展阶段：随着做的东西复杂化，这些需要更多的组织，引入大量设计模式，此时会催生出大量的frameworks</div><div class="line">		3.工程化阶段：随着团队的扩充，就会进入工程化的阶段，各类mvc，mvp，mvvm等设计，可视化开发，自动化测试，团队协作系统等。</div><div class="line">	标准：根据模块化、组件化、规范化、自动化四个来思考，软件工程化关注的是性能、稳定性、可用性、可维护性等方面，一切以这些为目标的工作都是<span class="string">"前端工程化"</span></div><div class="line">	目标：以尽可能快的速度实现可信赖的产品。尽可能短的时间包括开发速度、部署速度与重构速度，而可信赖又在于产品的可测试性、可变性以及Bug的重现与定位</div><div class="line">3.横向发展</div><div class="line">	了解业务发展 -- 了解一些后端的设计</div><div class="line">	了解页面设计原理 --- UI</div><div class="line">	人工智能 -- 前端应用</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2018-Q2-Q3总体规划&quot;&gt;&lt;a href=&quot;#2018-Q2-Q3总体规划&quot; class=&quot;headerlink&quot; title=&quot;2018 Q2-Q3总体规划&quot;&gt;&lt;/a&gt;2018 Q2-Q3总体规划&lt;/h3&gt;&lt;h4 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot;
    
    </summary>
    
      <category term="生活" scheme="https://lzm420241.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="前端" scheme="https://lzm420241.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="规划" scheme="https://lzm420241.github.io/tags/%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>如何避免感冒及如何处理感冒问题</title>
    <link href="https://lzm420241.github.io/2018/04/23/life/1/"/>
    <id>https://lzm420241.github.io/2018/04/23/life/1/</id>
    <published>2018-04-23T06:13:25.000Z</published>
    <updated>2018-04-23T06:47:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何预防感冒"><a href="#如何预防感冒" class="headerlink" title="如何预防感冒"></a>如何预防感冒</h3><h4 id="感冒的定义"><a href="#感冒的定义" class="headerlink" title="感冒的定义"></a>感冒的定义</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">伤风，又称普通感冒（common cold），医学上还称为急性上呼吸道感染或急性鼻咽炎，是一种上呼吸道的病毒性感染，主要原发于鼻腔，但也可能进犯喉咙以及鼻窦。症状一般于暴露病原后两天内开始出现，包含咳嗽、喉咙痛、流鼻水、打喷嚏、头痛、发烧等。大部分症状通常在七到十天内会缓解，但某些症状可能会持续三个星期以上。有其他健康问题者患感冒时可能会并发肺炎</div></pre></td></tr></table></figure>
<h4 id="如何预防"><a href="#如何预防" class="headerlink" title="如何预防"></a>如何预防</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.勤洗手</div><div class="line">2.勤通风</div><div class="line">3.增强体质</div><div class="line">4.流感疫苗</div></pre></td></tr></table></figure>
<h3 id="如何处理感冒问题"><a href="#如何处理感冒问题" class="headerlink" title="如何处理感冒问题"></a>如何处理感冒问题</h3><h4 id="感冒类型"><a href="#感冒类型" class="headerlink" title="感冒类型"></a>感冒类型</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.风寒型感冒：病人除了有鼻塞、喷嚏、咳嗽、头痛等一般症状外，还有畏寒、低热、无汗、流清涕、吐稀薄白色痰等特点。这种感冒与病人感受风寒有关。治疗应以辛温解表为原则。病人可选用伤风感冒冲剂、感冒清热冲剂、九味羌活丸、通宣理肺丸、午时茶颗粒等药物治疗。若病人兼有内热便秘的症状，可服用防风通圣丸治疗。风寒型感冒病人忌用桑菊感冒片、银翘解毒片、羚翘解毒片、复方感冒片等药物。</div><div class="line">2.风热型感冒：病人除了有鼻塞、流涕、咳嗽、头痛等感冒的一般症状外，还有发热重、痰液粘稠呈黄色等特点。治疗应以辛凉解表为原则。病人可选用感冒退热冲剂、板蓝根冲剂、银翘解毒丸、羚羊解毒丸等药物治疗。风热型感冒病人忌用九味羌活丸、理肺丸等药物。</div><div class="line">3.暑湿型感冒：病人表现为畏寒、发热、口淡无味、头痛、头胀、腹痛、腹泻等症状。此类型感冒多发生在夏季。治疗应以清暑、祛湿、解表为主。病人可选用藿香正气水、银翘解毒丸等药物治疗。如果病人胃肠道症状较重，不宜选用保和丸、山楂丸、香砂养胃丸等药物。</div><div class="line">4.时行感冒：病人的症状与风热感冒的症状相似。但时行感冒病人较风热感冒病人的症状重。病人可表现为突然畏寒、高热、头痛、怕冷、寒战、头痛剧烈、全身酸痛、疲乏无力、鼻塞、流涕、干咳、胸痛、恶心、食欲不振，婴幼儿或老年人可能并发肺炎或心力衰竭等症状。治疗应以清热解毒、疏风透表为主</div></pre></td></tr></table></figure>
<h4 id="感冒过程"><a href="#感冒过程" class="headerlink" title="感冒过程"></a>感冒过程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.初始症状是头晕，浑身无力，全身酸痛等。</div><div class="line">2.以上症状持续几天之后开始喉咙发炎，头痛加重。。。</div><div class="line">3.由发炎引起其他地方发炎，且一些症状加重，流鼻涕，咳嗽等。</div><div class="line">4.病情严重</div></pre></td></tr></table></figure>
<h4 id="感冒可采取一些的药物"><a href="#感冒可采取一些的药物" class="headerlink" title="感冒可采取一些的药物"></a>感冒可采取一些的药物</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.发烧、头痛。这时候就需要解热镇痛成分——对乙酰氨基酚、阿司匹林、双氯芬酸</div><div class="line">2.鼻塞，为什么会鼻塞呢？主要是鼻腔充血，我们需要一些减轻鼻腔充血的药物，比如——伪麻黄碱</div></pre></td></tr></table></figure>
<h4 id="感冒一些经验"><a href="#感冒一些经验" class="headerlink" title="感冒一些经验"></a>感冒一些经验</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.感冒时初始症状无法抑制时，感冒会有一个上升期，且感冒不断加重</div><div class="line">2.当感冒到达一个高峰期时，此时一些感冒药能够起到一个很大作用</div><div class="line">3.如果有发烧，切记需要吃退烧药</div><div class="line">4.尽量不要打抗生素，对身体危害太大</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;如何预防感冒&quot;&gt;&lt;a href=&quot;#如何预防感冒&quot; class=&quot;headerlink&quot; title=&quot;如何预防感冒&quot;&gt;&lt;/a&gt;如何预防感冒&lt;/h3&gt;&lt;h4 id=&quot;感冒的定义&quot;&gt;&lt;a href=&quot;#感冒的定义&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="生活" scheme="https://lzm420241.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感冒" scheme="https://lzm420241.github.io/tags/%E6%84%9F%E5%86%92/"/>
    
      <category term="预防" scheme="https://lzm420241.github.io/tags/%E9%A2%84%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>javascript提升之道</title>
    <link href="https://lzm420241.github.io/2017/05/22/javascript/javascript-2/"/>
    <id>https://lzm420241.github.io/2017/05/22/javascript/javascript-2/</id>
    <published>2017-05-22T15:09:25.000Z</published>
    <updated>2018-04-23T06:12:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="不同等级的前端工程师如何解决问题"><a href="#不同等级的前端工程师如何解决问题" class="headerlink" title="不同等级的前端工程师如何解决问题"></a>不同等级的前端工程师如何解决问题</h3><h4 id="初级前端工程师"><a href="#初级前端工程师" class="headerlink" title="初级前端工程师"></a>初级前端工程师</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.了解问题，通过google或者baidu查找到答案，然后直接将代码copy到页面中，运行发现问题，直ls接push git</div><div class="line">2.</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;不同等级的前端工程师如何解决问题&quot;&gt;&lt;a href=&quot;#不同等级的前端工程师如何解决问题&quot; class=&quot;headerlink&quot; title=&quot;不同等级的前端工程师如何解决问题&quot;&gt;&lt;/a&gt;不同等级的前端工程师如何解决问题&lt;/h3&gt;&lt;h4 id=&quot;初级前端工程师&quot;&gt;
    
    </summary>
    
      <category term="前端知识点总结" scheme="https://lzm420241.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="javascript" scheme="https://lzm420241.github.io/tags/javascript/"/>
    
      <category term="架构" scheme="https://lzm420241.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CSS 常见布局总结</title>
    <link href="https://lzm420241.github.io/2017/05/22/javascript/css-1/"/>
    <id>https://lzm420241.github.io/2017/05/22/javascript/css-1/</id>
    <published>2017-05-22T14:45:25.000Z</published>
    <updated>2018-04-23T06:07:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三栏式布局"><a href="#三栏式布局" class="headerlink" title="三栏式布局"></a>三栏式布局</h3><h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">核心思想:通过margin-left和margin-right来将left和right两栏移到center这一栏中,然后利用position:static的方式来左右平移实现三栏式布局</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>#header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>#footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">min-width</span>: <span class="number">550px</span>;      <span class="comment">/* 2x LC width + RC width */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#container</span> &#123;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">200px</span>;   <span class="comment">/* LC width */</span></div><div class="line">  <span class="attribute">padding-right</span>: <span class="number">150px</span>;  <span class="comment">/* RC width */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#container</span> <span class="selector-class">.column</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#center</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#e9e9e9</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#left</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;          <span class="comment">/* LC width */</span></div><div class="line">  <span class="attribute">right</span>: <span class="number">200px</span>;          <span class="comment">/* LC width */</span></div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#right</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: blue;</div><div class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;          <span class="comment">/* RC width */</span></div><div class="line">  <span class="attribute">margin-right</span>: -<span class="number">150px</span>;  <span class="comment">/* RC width */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#footer</span> &#123;</div><div class="line">  <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#header</span>, </div><div class="line"><span class="selector-id">#footer</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#c9c9c9</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*** IE6 Fix ***/</span></div><div class="line">* <span class="selector-tag">html</span> <span class="selector-id">#left</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">150px</span>;           <span class="comment">/* RC width */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">核心思想: 将center的div设置width100%,然后内置div利用margin-left和margin-right撑开空间供sub和extra使用,同时内置div和sub,extra刚好布满三栏</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>header<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-inner"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>main<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>sub<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"extra"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>extra<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">* &#123;</div><div class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-tag">body</span> &#123;</div><div class="line">        <span class="attribute">min-width</span>: <span class="number">700px</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.header</span>,</div><div class="line">    <span class="selector-class">.footer</span> &#123;</div><div class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</div><div class="line">        <span class="attribute">background</span>: <span class="number">#aaa</span>;</div><div class="line">        <span class="attribute">text-align</span>: center;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.sub</span>,</div><div class="line">    <span class="selector-class">.main</span>,</div><div class="line">    <span class="selector-class">.extra</span> &#123;</div><div class="line">        <span class="attribute">float</span>: left;</div><div class="line">        <span class="attribute">min-height</span>: <span class="number">130px</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.sub</span> &#123;</div><div class="line">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">        <span class="attribute">background</span>: red;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.extra</span> &#123;</div><div class="line">        <span class="attribute">margin-left</span>: -<span class="number">220px</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">220px</span>;</div><div class="line">        <span class="attribute">background</span>: blue;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.main</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.main-inner</span> &#123;</div><div class="line">        <span class="attribute">margin-left</span>: <span class="number">200px</span>;</div><div class="line">        <span class="attribute">margin-right</span>: <span class="number">220px</span>;</div><div class="line">        <span class="attribute">min-height</span>: <span class="number">130px</span>;</div><div class="line">        <span class="attribute">background</span>: green;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.footer</span> &#123;</div><div class="line">        <span class="attribute">clear</span>: both;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="浮动布局"><a href="#浮动布局" class="headerlink" title="浮动布局"></a>浮动布局</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">核心思想: 利用<span class="built_in">float</span>的方式将left和right的div撑上,然后设置center的div margin-left和margin-right来实现三栏布局</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#container</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#left</span>&#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">background-color</span>: green;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column</span>&#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#right</span>&#123;</div><div class="line">	<span class="attribute">float</span>: right;</div><div class="line">	<span class="attribute">background-color</span>: red;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#center</span>&#123;</div><div class="line">	<span class="attribute">background-color</span>: yellow;</div><div class="line">	<span class="attribute">margin</span>: auto <span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><h4 id="已知高度宽度元素的水平垂直居中"><a href="#已知高度宽度元素的水平垂直居中" class="headerlink" title="已知高度宽度元素的水平垂直居中"></a>已知高度宽度元素的水平垂直居中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">核心思想(一): 绝对定位与负边距实现</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#container</span>&#123;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#center</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">    <span class="attribute">margin</span>:-<span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">核心思想(二): 绝对定位与margin</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#container</span>&#123;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#center</span>&#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">margin</span>:auto;</div><div class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="未知高度和宽度元素的水平垂直居中"><a href="#未知高度和宽度元素的水平垂直居中" class="headerlink" title="未知高度和宽度元素的水平垂直居中"></a>未知高度和宽度元素的水平垂直居中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">核心思想(一): 当要被居中的元素是inline或者inline-block元素可以巧妙的将父级容器设置为display:table-cell，配合text-align:center和vertical-align:middle即可以实现水平垂直居中</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#container</span>&#123;</div><div class="line">    <span class="attribute">display</span>:table-cell;</div><div class="line">    <span class="attribute">text-align</span>:center;</div><div class="line">    <span class="attribute">vertical-align</span>:middle;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#center</span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">核心思想(二): 利用Css3的transform，可以轻松的在未知元素的高宽的情况下实现元素的垂直居中</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#container</span>&#123;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#center</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">核心思想(三): 使用flex布局，无需绝对定位等改变布局的操作，可以轻松实现元素的水平垂直居中</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#container</span>&#123;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">    <span class="attribute">justify-content</span>:center;</div><div class="line">    <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#center</span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;三栏式布局&quot;&gt;&lt;a href=&quot;#三栏式布局&quot; class=&quot;headerlink&quot; title=&quot;三栏式布局&quot;&gt;&lt;/a&gt;三栏式布局&lt;/h3&gt;&lt;h4 id=&quot;圣杯布局&quot;&gt;&lt;a href=&quot;#圣杯布局&quot; class=&quot;headerlink&quot; title=&quot;圣杯布局&quot;
    
    </summary>
    
      <category term="前端知识点总结" scheme="https://lzm420241.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="css" scheme="https://lzm420241.github.io/tags/css/"/>
    
      <category term="css layout" scheme="https://lzm420241.github.io/tags/css-layout/"/>
    
  </entry>
  
  <entry>
    <title>MVVM模式及与MVP和MVC的区别</title>
    <link href="https://lzm420241.github.io/2017/05/22/javascript/javascript-1/"/>
    <id>https://lzm420241.github.io/2017/05/22/javascript/javascript-1/</id>
    <published>2017-05-22T14:43:58.000Z</published>
    <updated>2018-04-23T06:02:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三种模式的思想"><a href="#三种模式的思想" class="headerlink" title="三种模式的思想"></a>三种模式的思想</h3><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><ol>
<li>View 传送指令到 Controller</li>
<li>Controller 完成业务逻辑后，要求 Model 改变状态</li>
<li>Model 将新的数据发送到 View，用户得到反馈</li>
</ol>
<h4 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h4><ol>
<li>各部分之间的通信，都是双向的。</li>
<li>View 与 Model 不发生联系，都通过 Presenter 传递。</li>
<li>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</li>
</ol>
<h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><ol>
<li>将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致</li>
<li>唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel</li>
</ol>
<h4 id="三者之间的逻辑图"><a href="#三者之间的逻辑图" class="headerlink" title="三者之间的逻辑图"></a>三者之间的逻辑图</h4><p><img src="http://okzxxeq9y.bkt.clouddn.com/mvc_mvp_mvvm.jpg" alt="Alt text"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;三种模式的思想&quot;&gt;&lt;a href=&quot;#三种模式的思想&quot; class=&quot;headerlink&quot; title=&quot;三种模式的思想&quot;&gt;&lt;/a&gt;三种模式的思想&lt;/h3&gt;&lt;h4 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="前端知识点总结" scheme="https://lzm420241.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="javascript" scheme="https://lzm420241.github.io/tags/javascript/"/>
    
      <category term="架构" scheme="https://lzm420241.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>堆栈存储区别及常用算法总结</title>
    <link href="https://lzm420241.github.io/2017/05/22/algorithm/algorithm-1/"/>
    <id>https://lzm420241.github.io/2017/05/22/algorithm/algorithm-1/</id>
    <published>2017-05-22T14:40:47.000Z</published>
    <updated>2018-04-23T06:03:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="堆栈之间的区别"><a href="#堆栈之间的区别" class="headerlink" title="堆栈之间的区别"></a>堆栈之间的区别</h3><ol>
<li>栈区（stack）由编译器自动分配释放，存放函数的参数值，局部变量的值等 其操作方式类似于数据结构中的栈</li>
<li>堆区（heap） 一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收 注意它与数据结构中的堆是两回事，分配方式倒是类似于链表</li>
<li>申请后系统的响应: 只要栈的剩余空间大于所申·请空间，系统将为程序提供内存，否则将报异常提示栈溢出;首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时,会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，另外，对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确的释放本内存空间。另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中</li>
<li>申请大小的限制 : 栈获得的空间较小,堆获得的空间比较灵活，也比较大</li>
<li>申请效率的比较: 栈由系统自动分配，速度较快,但程序员是无法控制的;堆是由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便;</li>
<li>堆和栈中的存储内容 : 在函数调用时，第一个进栈的是主函数中后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数;一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容由程序员安排;</li>
<li>存取效率的比较: 在以后的存取中，在栈上的数组比指针所指向的字符串(例如堆)快</li>
</ol>
<h3 id="DP算法-Dynamic-programming"><a href="#DP算法-Dynamic-programming" class="headerlink" title="DP算法(Dynamic programming)"></a>DP算法(Dynamic programming)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.动态规划的本质，是对问题状态的定义和状态转移方程的定义</div><div class="line">2.将问题发展到各个阶段时所处于的各种客观情况用不同的状态,而且状态的选择要满足无后效性,即对后面的状态无任何影响</div><div class="line">3.上述状态定义好之后，状态和状态之间的关系式，就叫做状态转移方程</div><div class="line">4.典型例子: 01背包问题,装配线调度</div></pre></td></tr></table></figure>
<h3 id="DFS算法-Depth-First-Search"><a href="#DFS算法-Depth-First-Search" class="headerlink" title="DFS算法(Depth-First-Search)"></a>DFS算法(Depth-First-Search)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">深度优先搜索在搜索过程中访问某个顶点后，需要递归地访问此顶点的所有未访问过的相邻顶点。</div><div class="line">初始条件下所有节点为白色，选择一个作为起始顶点，按照如下步骤遍历：</div><div class="line">a. 选择起始顶点涂成灰色，表示还未访问</div><div class="line">b. 从该顶点的邻接顶点中选择一个，继续这个过程（即再寻找邻接结点的邻接结点），一直深入下去，直到一个顶点没有邻接结点了，涂黑它，表示访问过了</div><div class="line">c. 回溯到这个涂黑顶点的上一层顶点，再找这个上一层顶点的其余邻接结点，继续如上操作，如果所有邻接结点往下都访问过了，就把自己涂黑，再回溯到更上一层。</div><div class="line">d. 上一层继续做如上操作，知道所有顶点都访问过。</div><div class="line"></div><div class="line">核心是通过栈的方式实现</div></pre></td></tr></table></figure>
<h3 id="BFS算法-Breadth-First-Search"><a href="#BFS算法-Breadth-First-Search" class="headerlink" title="BFS算法(Breadth-First-Search)"></a>BFS算法(Breadth-First-Search)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">广度优先搜索在进一步遍历图中顶点之前，先访问当前顶点的所有邻接结点。</div><div class="line">a .首先选择一个顶点作为起始结点，并将其染成灰色，其余结点为白色。</div><div class="line">b. 将起始结点放入队列中。</div><div class="line">c. 从队列首部选出一个顶点，并找出所有与之邻接的结点，将找到的邻接结点放入队列尾部，将已访问过结点涂成黑色，没访问过的结点是白色。如果顶点的颜色是灰色，表示已经发现并且放入了队列，如果顶点的颜色是白色，表示还没有发现</div><div class="line">d. 按照同样的方法处理队列中的下一个结点。</div><div class="line">基本就是出队的顶点变成黑色，在队列里的是灰色，还没入队的是白色</div><div class="line"></div><div class="line">核心是通过队列的方式实现</div></pre></td></tr></table></figure>
<h3 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">核心思想: 把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并</div></pre></td></tr></table></figure>
<h3 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">核心思想: 在包含问题的所有解的解空间树中，按照深度优先搜索的策略，从根结点出发深度探索解空间树。当探索到某一结点时，要先判断该结点是否包含问题的解，如果包含，就从该结点出发继续探索下去，如果该结点不包含问题的解，则逐层向其祖先结点回溯。（其实回溯法就是对隐式图的深度优先搜索算法）</div></pre></td></tr></table></figure>
<h3 id="分支限界法"><a href="#分支限界法" class="headerlink" title="分支限界法"></a>分支限界法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">核心思想: 所谓“分支”就是采用广度优先的策略，依次搜索E-结点的所有分支，也就是所有相邻结点，抛弃不满足约束条件的结点，其余结点加入活结点表。然后从表中选择一个结点作为下一个E-结点，继续搜索</div></pre></td></tr></table></figure>
<h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">核心思想: 在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;堆栈之间的区别&quot;&gt;&lt;a href=&quot;#堆栈之间的区别&quot; class=&quot;headerlink&quot; title=&quot;堆栈之间的区别&quot;&gt;&lt;/a&gt;堆栈之间的区别&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;栈区（stack）由编译器自动分配释放，存放函数的参数值，局部变量的值等 其操作方式类似
    
    </summary>
    
      <category term="算法" scheme="https://lzm420241.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="stack heap" scheme="https://lzm420241.github.io/tags/stack-heap/"/>
    
      <category term="DP DFS BFS" scheme="https://lzm420241.github.io/tags/DP-DFS-BFS/"/>
    
  </entry>
  
  <entry>
    <title>前端常见面试题归纳(三)</title>
    <link href="https://lzm420241.github.io/2017/05/21/interview/interview-3/"/>
    <id>https://lzm420241.github.io/2017/05/21/interview/interview-3/</id>
    <published>2017-05-21T05:35:59.000Z</published>
    <updated>2018-04-23T06:03:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"><a href="#li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？" class="headerlink" title="li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"></a>li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">行框的排列会受到代码中间空白（回车\空格）等的影响,当li通过换行后会产生空白</div><div class="line">解决方案：</div><div class="line">1.浮动li中<span class="built_in">float</span>：left</div><div class="line">2.在ul中用font-size：0（谷歌不支持）；可以使用letter-space：-3px</div><div class="line">3.li之间不换行，且不留空格</div></pre></td></tr></table></figure>
<h3 id="如果需要手动写动画，你认为最小时间间隔是多久，为什么？"><a href="#如果需要手动写动画，你认为最小时间间隔是多久，为什么？" class="headerlink" title="如果需要手动写动画，你认为最小时间间隔是多久，为什么？"></a>如果需要手动写动画，你认为最小时间间隔是多久，为什么？</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms</div></pre></td></tr></table></figure>
<h3 id="什么叫做优雅降级和渐进增强"><a href="#什么叫做优雅降级和渐进增强" class="headerlink" title="什么叫做优雅降级和渐进增强"></a>什么叫做优雅降级和渐进增强</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">渐进增强（Progressive Enhancement）：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。</div><div class="line">优雅降级（Graceful Degradation）：一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览</div></pre></td></tr></table></figure>
<h3 id="如何解决跨域"><a href="#如何解决跨域" class="headerlink" title="如何解决跨域"></a>如何解决跨域</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">跨域资源共享</div><div class="line">    基本思想就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败</div><div class="line">jsonp跨域</div><div class="line">    JSONP也叫填充式JSON，是应用JSON的一种新方法，只不过是被包含在函数调用中的JSON</div><div class="line">通过修改document.domain来跨子域</div><div class="line">使用HTML5的window.postMessage方法跨域</div></pre></td></tr></table></figure>
<h3 id="关于javascript中apply-和call-方法的区别"><a href="#关于javascript中apply-和call-方法的区别" class="headerlink" title="关于javascript中apply()和call()方法的区别"></a>关于javascript中apply()和call()方法的区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">方法传递的参数不同 apply是数组传递，call是单个值传递</div></pre></td></tr></table></figure>
<h3 id="XSS和CSRF原理"><a href="#XSS和CSRF原理" class="headerlink" title="XSS和CSRF原理"></a>XSS和CSRF原理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">XSS 全称(Cross Site Scripting) 跨站脚本攻击，是Web程序中最常见的漏洞。指攻击者在网页中嵌入客户端脚本(例如JavaScript),当用户浏览此网页时，脚本就会在用户的浏览器上执行，从而达到攻击者的目的.  比如获取用户的Cookie，导航到恶意网站,携带木马等</div><div class="line">CSRF攻击(Cross Site Request Forgery) 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法</div></pre></td></tr></table></figure>
<h3 id="多个标签页之间的通信"><a href="#多个标签页之间的通信" class="headerlink" title="多个标签页之间的通信"></a>多个标签页之间的通信</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">通过localstorage实现 当localstorage里面发生改变就会出发storage事件</div><div class="line">通过WebSocket实现</div></pre></td></tr></table></figure>
<h3 id="什么是FOUC？如何避免FOUC-Flash-of-Unstyled-Content-？"><a href="#什么是FOUC？如何避免FOUC-Flash-of-Unstyled-Content-？" class="headerlink" title="什么是FOUC？如何避免FOUC(Flash of Unstyled Content)？"></a>什么是FOUC？如何避免FOUC(Flash of Unstyled Content)？</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">FOUC即文档样式短暂失效，也就是HTML代码加载成功时它的CSS文件还没有加载，导致出现的网页内容没有样式，一般有这几种情况会导致FOUC：</div><div class="line">    1、使用import方法导入样式表</div><div class="line">    2、HTML代码在前，CSS样式表在后</div><div class="line">解决方法也很简单:</div><div class="line">    1、尽量减少使用import方法导入样式表</div><div class="line">    2、CSS样式表全部放到HEAD里</div></pre></td></tr></table></figure>
<h3 id="null和undefined的区别"><a href="#null和undefined的区别" class="headerlink" title="null和undefined的区别"></a>null和undefined的区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">null表示<span class="string">"没有对象"</span>，即该处不应该有值</div><div class="line">undefined表示<span class="string">"缺少值"</span>，就是此处应该有一个值，但是还没有定义</div></pre></td></tr></table></figure>
<h3 id="AMD规范与CMD规范的区别"><a href="#AMD规范与CMD规范的区别" class="headerlink" title="AMD规范与CMD规范的区别"></a>AMD规范与CMD规范的区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.对于依赖的模块，AMD 是提前执行，CMD 是延迟执行</div><div class="line">2.CMD 推崇依赖就近，AMD 推崇依赖前置</div><div class="line">3.AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一</div></pre></td></tr></table></figure>
<h3 id="JavaScript-对象的深度克隆"><a href="#JavaScript-对象的深度克隆" class="headerlink" title="JavaScript 对象的深度克隆"></a>JavaScript 对象的深度克隆</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">浅度克隆 ：基本类型为值传递，对象仍为引用传递</div><div class="line">深度克隆 ：所有元素或属性均完全克隆，并于原引用类型完全独立，即，在后面修改对象的属性的时候，原对象不会被修改</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 判断arr是否为一个数组，返回一个bool值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">'[object Array]'</span>;  </div><div class="line">&#125;</div><div class="line"><span class="comment">// 深度克隆</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span> (<span class="params">obj</span>) </span>&#123;  </div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> obj !== <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> obj;        <span class="comment">//原始类型直接返回</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> o = isArray(obj) ? [] : &#123;&#125;; </div><div class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> obj) &#123;  </div><div class="line">        <span class="keyword">if</span>(obj.hasOwnProperty(i))&#123; </div><div class="line">            o[i] = <span class="keyword">typeof</span> obj[i] === <span class="string">"object"</span> ? deepClone(obj[i]) : obj[i]; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？&quot;&gt;&lt;a href=&quot;#li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？&quot; class=&quot;headerlink&quot; title=&quot;li与li之间有看不见的空白间隔是什么原因引起的？有
    
    </summary>
    
      <category term="前端知识点总结" scheme="https://lzm420241.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="前端面试题" scheme="https://lzm420241.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>前端常见面试题归纳(二)</title>
    <link href="https://lzm420241.github.io/2017/05/21/interview/interview-2/"/>
    <id>https://lzm420241.github.io/2017/05/21/interview/interview-2/</id>
    <published>2017-05-21T03:30:27.000Z</published>
    <updated>2018-04-23T06:03:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q-从-URL-输入到页面展现发生了什么"><a href="#Q-从-URL-输入到页面展现发生了什么" class="headerlink" title="Q:从 URL 输入到页面展现发生了什么"></a>Q:从 URL 输入到页面展现发生了什么</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1.将URL输入到浏览器中</div><div class="line">2.浏览器根据域名查找IP地址</div><div class="line">    DNS查找过程如下：</div><div class="line">        Browser cache(浏览器缓存)—浏览器会缓存DNS记录一段时间。有趣的是，操作系统并没有告诉浏览器每一个DNS记录缓存的存活时间，所以浏览器自己会缓存它们固定的一段时间（不同的浏览器存在差异，一般是2-30分钟）。</div><div class="line">        OS cache（操作系统缓存）—如果浏览器缓存中没有找到对应的记录，浏览器就会做一次系统请求（Windows系统中就是根据名称从host文件中获得IP地址）。操作系统有它自己的缓存。</div><div class="line">        Router cache（路由缓存）—请求会在你的路由器上继续进行，路由一般都会有自己的DNS缓存。</div><div class="line">        ISP DNS cache(ISP DNS缓存)—下一个地方就是查找ISP<span class="string">'s DNS服务器了，当然，它也会有一份缓存。</span></div><div class="line">        Recursive search(递归查找)—你的ISP's DNS服务从根域名开始循环查找，根据.com查找顶级域名服务器，然后再到 Facebook 的域名服务器。通常来说，DNS服务器都会有.com域名服务器的缓存，所以根域名服务器不是必须的</div><div class="line">3.浏览器发送一个HTTP请求到浏览器</div><div class="line">4.服务器通过重定向进行响应</div><div class="line">5.浏览器重定向</div><div class="line">6.服务器处理请求</div><div class="line">7.服务器返回HTML响应</div><div class="line">8.浏览器开始渲染HTML</div><div class="line">9.浏览器为嵌入的对象发送请求 （例如：图片等）</div><div class="line">10.浏览器发送AJAX请求</div></pre></td></tr></table></figure>
<h3 id="Q-JS-引用类型笔试题"><a href="#Q-JS-引用类型笔试题" class="headerlink" title="Q:JS 引用类型笔试题"></a>Q:JS 引用类型笔试题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//红宝书 ECMAScript中的所有参数传递的都是值，不可能通过引用传递参数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> temp = x;</div><div class="line">  x = y;</div><div class="line">  y = temp;  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span></div><div class="line">swap(a, b)</div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">//输出什么</span></div><div class="line"><span class="built_in">console</span>.log(b) <span class="comment">//输出什么</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>: <span class="string">'jirengu'</span>&#125;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">age</span>: <span class="number">2</span>&#125;</div><div class="line">swap(obj1, obj2)</div><div class="line"><span class="built_in">console</span>.log(obj1)  <span class="comment">//输出什么</span></div><div class="line"><span class="built_in">console</span>.log(obj2)  <span class="comment">//输出什么</span></div><div class="line"></div><div class="line">A:</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line">&#123;<span class="attr">name</span>: <span class="string">'jirengu'</span>&#125;</div><div class="line">&#123;<span class="attr">age</span>: <span class="number">2</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="Q-JS-字符串操作面试题"><a href="#Q-JS-字符串操作面试题" class="headerlink" title="Q:JS 字符串操作面试题"></a>Q:JS 字符串操作面试题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 请用JavaScript 实现一个方法，该方法能够判断两个字符串是否匹配</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMatch</span>(<span class="params">str1, str2</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line">isMatch(<span class="string">'something'</span>, <span class="string">'ginhtemos'</span>)  <span class="comment">// true</span></div><div class="line">isMatch(<span class="string">'aaa'</span>, <span class="string">'aa'</span>)  <span class="comment">//false</span></div><div class="line">isMatch(<span class="string">'abb'</span>, <span class="string">'baa'</span>)  <span class="comment">//false</span></div><div class="line">isMatch(<span class="string">'hello'</span>, <span class="string">'olelh'</span>)  <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="comment">//A:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMatch</span>(<span class="params">str1, str2</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> str1.split(<span class="string">''</span>).sort().join(<span class="string">''</span>) === str2.split(<span class="string">''</span>).sort().join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Q-JS-运算符优先级相关题目"><a href="#Q-JS-运算符优先级相关题目" class="headerlink" title="Q:JS 运算符优先级相关题目"></a>Q:JS 运算符优先级相关题目</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Q:</span></div><div class="line"><span class="comment">// object1和object2 都是对象，所以运算的时候会调用valueOf方法</span></div><div class="line">(<span class="number">2</span> &gt; <span class="number">1</span> + -<span class="number">-1</span>) + <span class="literal">true</span>)</div><div class="line"><span class="comment">// 布尔值在运算时会自动转为数字 true -&gt; 1 false -&gt; 0</span></div><div class="line">(<span class="number">1</span>+ <span class="number">0</span>) + <span class="number">1</span>)</div></pre></td></tr></table></figure>
<h3 id="Q-JS-类型判断相关问题"><a href="#Q-JS-类型判断相关问题" class="headerlink" title="Q:JS 类型判断相关问题"></a>Q:JS 类型判断相关问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.写一个函数 isEmptyObject，判断一个对象是不是空对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmptyObject</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  <span class="comment">// todo...</span></div><div class="line">&#125;</div><div class="line">isEmptyObject( &#123;&#125; ); <span class="comment">//true</span></div><div class="line">isEmptyObject( &#123;<span class="attr">a</span>:<span class="number">1</span>&#125; ) ; <span class="comment">//false</span></div><div class="line"><span class="comment">// 2.如果可以用 ES5，那么你会如何写这个函数？</span></div><div class="line"></div><div class="line"><span class="comment">// Q:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmptyObject</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>( <span class="built_in">arguments</span>[<span class="number">0</span>] &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">0</span>] === <span class="string">"object"</span> ) &#123;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> key <span class="keyword">in</span> <span class="built_in">arguments</span>[<span class="number">0</span>] ) &#123;</div><div class="line">    　<span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  　&#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">throw</span> <span class="string">"obj need to be an object"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// es6</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmptyObject</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span> &amp;&amp; obj.constructor === <span class="built_in">Object</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 循环/闭包/setTimeout/Promise 综合</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0..4</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;, <span class="number">1000</span> * i);</div><div class="line">&#125;</div><div class="line"><span class="comment">//5..5</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;, i * <span class="number">1000</span>);</div><div class="line">  &#125;)(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">//0..4</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;, i * <span class="number">1000</span>);</div><div class="line">  &#125;)(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">//5..5</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  setTimeout((<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;)(i), i * <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//5..5  **0..4**</span></div><div class="line"><span class="comment">// setTimeout(undefined, i*1000);</span></div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">  <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;<span class="number">10000</span> ; i++ ) &#123;</div><div class="line">    i == <span class="number">9999</span> &amp;&amp; resolve();</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="number">5</span>);</div><div class="line"><span class="comment">//2 3 5 4 1</span></div></pre></td></tr></table></figure>
<h3 id="什么闭包-闭包有什么用"><a href="#什么闭包-闭包有什么用" class="headerlink" title="什么闭包,闭包有什么用"></a>什么闭包,闭包有什么用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">闭包是在某个作用域内定义的函数，它可以访问这个作用域内的所有变量</div><div class="line">闭包作用域链通常包括三个部分：</div><div class="line">    函数本身作用域</div><div class="line">    闭包定义时的作用域</div><div class="line">    全局作用域</div><div class="line">闭包常见用途：</div><div class="line">    创建特权方法用于访问控制</div><div class="line">    事件处理程序及回调</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Q-从-URL-输入到页面展现发生了什么&quot;&gt;&lt;a href=&quot;#Q-从-URL-输入到页面展现发生了什么&quot; class=&quot;headerlink&quot; title=&quot;Q:从 URL 输入到页面展现发生了什么&quot;&gt;&lt;/a&gt;Q:从 URL 输入到页面展现发生了什么&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="前端知识点总结" scheme="https://lzm420241.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="前端面试题" scheme="https://lzm420241.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>前端常见面试题归纳(一)</title>
    <link href="https://lzm420241.github.io/2017/05/21/interview/interview/"/>
    <id>https://lzm420241.github.io/2017/05/21/interview/interview/</id>
    <published>2017-05-21T01:54:17.000Z</published>
    <updated>2018-04-23T06:03:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>1.<strong>DOM操作</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">createElement 通过传入指定的一个标签名来创建一个元素，如果传入的标签名是一个未知的，则会创建一个自定义的标签</div><div class="line">createTextNode createTextNode用来创建一个文本节点</div><div class="line"><span class="built_in">clone</span>Node <span class="built_in">clone</span>Node是用来返回调用方法的节点的一个副本，它接收一个bool参数，用来表示是否复制子元素</div><div class="line">createDocumentFragment createDocumentFragment方法用来创建一个DocumentFragment</div><div class="line">appendChild 将指定的节点添加到调用该方法的节点的子元素的末尾</div><div class="line">insertBefore insertBefore用来添加一个节点到一个参照节点之前</div><div class="line">removeChild 删除指定的子节点并返回</div><div class="line">replaceChild replaceChild用于使用一个节点替换另一个节点</div><div class="line">document.getElementById 根据元素id返回元素，返回值是Element类型，如果不存在该元素，则返回null</div><div class="line">document.getElementsByTagName 这个接口根据元素标签名获取元素，返回一个即时的HTMLCollection类型</div><div class="line">document.getElementsByName getElementsByName主要是通过指定的name属性来获取元素，它返回一个即时的NodeList对象</div><div class="line">document.getElementsByClassName 这个API是根据元素的class返回一个即时的HTMLCollection</div><div class="line">document.querySelector和document.querySelectorAll 通过css选择器来查找元素</div><div class="line">节点关系型api parentNode parentElement previousSibling previousElementSibling nextSibling nextElementSibling childNodes children firstNode lastNode hasChildNodes</div><div class="line">元素属性型api <span class="built_in">set</span>Attribute getAttribute</div><div class="line">元素样式型api </div><div class="line">window.getComputedStyle 用来获取应用到元素后的样式</div><div class="line">getBoundingClientRect 用来返回元素的大小以及相对于浏览器可视窗口的位置</div></pre></td></tr></table></figure></p>
<p>2.<strong>如何使用事件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">HTML内连属性</div><div class="line">DOM属性绑定</div><div class="line">事件监听函数 addEventListener</div><div class="line">移除事件监听 removeEventListener</div><div class="line">模拟触发事件 dispatchEvent</div><div class="line">自定义事件 Event、CustomEvent 和 dispatchEvent</div><div class="line">事件顺序 捕获阶段-&gt;达到元素后-&gt;进入事件冒泡阶段</div><div class="line">事件Event对象几个属性：<span class="built_in">type</span>(string)，target(node)，currentTarget(node)，bubbles(boolean),preventDefault (<span class="keyword">function</span>),stopPropagation (<span class="keyword">function</span>),stopImmediatePropagation (<span class="keyword">function</span>),cancelable (boolean),eventPhase (number)</div></pre></td></tr></table></figure></p>
<p>3.<strong>XMLHttpRequest详解</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//XMLHttpRequest发送的ajax请求代码：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendAjax</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//构造表单数据</span></div><div class="line">  <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</div><div class="line">  formData.append(<span class="string">'username'</span>, <span class="string">'johndoe'</span>);</div><div class="line">  formData.append(<span class="string">'id'</span>, <span class="number">123456</span>);</div><div class="line">  <span class="comment">//创建xhr对象 </span></div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  <span class="comment">//设置xhr请求的超时时间</span></div><div class="line">  xhr.timeout = <span class="number">3000</span>;</div><div class="line">  <span class="comment">//设置响应返回的数据格式</span></div><div class="line">  xhr.responseType = <span class="string">"text"</span>;</div><div class="line">  <span class="comment">//创建一个 post 请求，采用异步</span></div><div class="line">  xhr.open(<span class="string">'POST'</span>, <span class="string">'/server'</span>, <span class="literal">true</span>);</div><div class="line">  <span class="comment">//注册相关事件回调处理函数</span></div><div class="line">  xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status == <span class="number">200</span>||<span class="keyword">this</span>.status == <span class="number">304</span>)&#123;</div><div class="line">        alert(<span class="keyword">this</span>.responseText);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; ... &#125;;</div><div class="line">  xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; ... &#125;;</div><div class="line">  xhr.upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; ... &#125;;</div><div class="line">  </div><div class="line">  <span class="comment">//发送数据</span></div><div class="line">  xhr.send(formData);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">XHR 对象的属性和方法</div><div class="line">属性:</div><div class="line">    readyState：HTTP 请求的状态</div><div class="line">    responseText：响应体（不包括头部）</div><div class="line">    responseXML：对请求的响应，解析为 XML 并作为 Document 对象返回</div><div class="line">    status：由服务器返回的 HTTP 状态代码，如 200 表示成功</div><div class="line">    statusText：这个属性用名称而不是数字指定了请求的 HTTP 的状态代码。也就是说，当状态为 200 的时候它是 <span class="string">"OK"</span>，当状态为 404 的时候它是 <span class="string">"Not Found"</span></div><div class="line">    responseType：返回的我们设置的数据类型（text，document，json，blob，arrayBuffer）</div><div class="line">    timeout：设置请求的超时时间</div><div class="line">方法:</div><div class="line">    loadstart(): 调用xhr.send()方法后立即触发</div><div class="line">    progress(): xhr.upload.onprogress在上传阶段(即xhr.send()之后，xhr.readystate=2之前)触发，每50ms触发一次；xhr.onprogress在下载阶段（即xhr.readystate=3时）触发，每50ms触发一次</div><div class="line">    timeout: xhr.timeout不等于0，由请求开始即onloadstart开始算起，当到达xhr.timeout所设置时间请求还未结束即onloadend，则触发此事件</div><div class="line">    load: 当请求成功完成时触发，此时xhr.readystate=4</div><div class="line">    loadend: 当请求结束（包括请求成功和请求失败）时触发</div><div class="line">    abort() : 取消当前响应，关闭连接并且结束任何未决的网络活动</div><div class="line">    getAllResponseHeaders()：把 HTTP 响应头部作为未解析的字符串返回</div><div class="line">    getResponseHeader()：返回指定的 HTTP 响应头部的值</div><div class="line">    open(method,url[,async = <span class="literal">true</span>[,username = null, [,password = null]])：初始化 HTTP 请求参数，例如 URL 和 HTTP 方法，但是并不发送请求</div><div class="line">    send()：发送 HTTP 请求，使用传递给 open() 方法的参数，以及传递给该方法的可选请求体</div><div class="line">    <span class="built_in">set</span>RequestHeader()：向一个打开但未发送的请求设置或添加一个 HTTP 请求</div><div class="line">    overrideMimeType()：返回的我们设置的数据类型</div><div class="line"></div><div class="line">xhr事件：onreadystatechange 监听xhr返回时的事件</div><div class="line">获取上传、下载的进度: onprogress事件</div><div class="line">    上传触发的是xhr.upload对象的 onprogress事件</div><div class="line">    下载触发的是xhr对象的onprogress事件</div><div class="line">事件出发顺序：</div><div class="line">    1.触发xhr.onreadystatechange(之后每次readyState变化时，都会触发一次)</div><div class="line">    2.触发xhr.onloadstart</div><div class="line">    //上传阶段开始：</div><div class="line">    3.触发xhr.upload.onloadstart</div><div class="line">    4.触发xhr.upload.onprogress</div><div class="line">    5.触发xhr.upload.onload</div><div class="line">    6.触发xhr.upload.onloadend</div><div class="line">    //上传结束，下载阶段开始：</div><div class="line">    7.触发xhr.onprogress</div><div class="line">    8.触发xhr.onload</div><div class="line">    9.触发xhr.onloadend</div></pre></td></tr></table></figure>
<p>4.<strong>如何使用浮动元素，以及带来的问题和解决方案</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">浮动定义：浮动的框可以左右移动，直至它的外边缘遇到包含框或者另一个浮动框的边缘，通过设置<span class="built_in">float</span>属性实现</div><div class="line">现象：正是因为浮动的这种特性，导致本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（高度塌陷）。在实际布局中，往往这并不是我们所希望的，所以需要闭合浮动元素，使其包含框表现出正常的高度</div><div class="line">如何清除浮动：</div><div class="line">    清除浮动：清除对应的单词是 clear，对应CSS中的属性是 clear：left | right | both | none</div><div class="line">    闭合浮动：更确切的含义是使浮动元素闭合，从而减少浮动带来的影响</div><div class="line">BFC的特性</div><div class="line">    块级格式化上下文会阻止外边距叠加</div><div class="line">    当两个相邻的块框在同一个块级格式化上下文中时，它们之间垂直方向的外边距会发生叠加。换句话说，如果这两个相邻的块框不属于同一个块级格式化上下文，那么它们的外边距就不会叠加。</div><div class="line">    块级格式化上下文不会重叠浮动元素</div><div class="line">    根据规定，一个块级格式化上下文的边框不能和它里面的元素的外边距重叠。这就意味着浏览器将会给块级格式化上下文创建隐式的外边距来阻止它和浮动元素的外边距叠加。由于这个原因，当给一个挨着浮动的块级格式化上下文添加负的外边距时将会不起作用（Webkit和IE6在这点上有一个问题——可以看这个测试用例）。</div><div class="line">    块级格式化上下文通常可以包含浮动</div><div class="line">如何触发BFC?</div><div class="line">    <span class="built_in">float</span> 除了none以外的值</div><div class="line">    overflow 除了visible 以外的值（hidden，auto，scroll ）</div><div class="line">    display (table-cell，table-caption，inline-block)</div><div class="line">    position（absolute，fixed）</div><div class="line">    fieldset元素</div><div class="line">BFC的几个用途</div><div class="line">    1、BFC可以阻止垂直边距叠加问题</div><div class="line">    2、BFC可以包含内部元素的浮动</div><div class="line">    3、BFC可以阻止元素被浮动覆盖</div><div class="line">    4、BFC可以决定清除浮动的范围</div></pre></td></tr></table></figure></p>
<p>5.<strong>HTMLXHTML区别，如何选择</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">xhtml:</div><div class="line">    1.所有的标记都都要闭合 </div><div class="line">    2.所有标签的元素和属性的名字都必须使用小写 </div><div class="line">    3.所有的XML标记都必须合理嵌套 </div><div class="line">    4.所有的属性必须用引号（单或双）包括在HTML中，你可以不需要给属性值加引号，但是在XHTML中，它们必须被加引号</div><div class="line">    5.把所有&lt;和&amp;特殊符号用编码表示任何小于号（&lt;），不是标签的一部分，都必须被编码为&amp; l t ; 任何大于号（&gt;），不是标签的一部分，都必须被编码为&amp; g t ; 任何与号（&amp;），不是实体的一部分的，都必须被编码为&amp; a m p</div><div class="line">    6.给所有属性赋一个值 </div><div class="line">    7.不要在注释内容中使<span class="string">"- -"</span> </div><div class="line">    8.图片必须有说明文字 每个图片标签都必须有ALT说明文字</div></pre></td></tr></table></figure></p>
<p>6.<strong>JSON作用，用途，设计结构</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">JSON API 是数据交互规范，用以定义客户端如何获取与修改资源，以及服务器如何响应对应请求</div><div class="line">JSON API设计用来最小化请求的数量，以及客户端与服务器间传输的数据量。在高效实现的同时，无需牺牲可读性、灵活性和可发现性</div><div class="line">JSON API需要使用JSON API媒体类型(application/vnd.api+json) 进行数据交互</div><div class="line">JSON API服务器支持通过GET方法获取资源。而且必须独立实现HTTP POST, PUT和DELETE方法的请求响应，以支持资源的创建、更新和删除</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h3&gt;&lt;p&gt;1.&lt;strong&gt;DOM操作&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;ta
    
    </summary>
    
      <category term="前端知识点总结" scheme="https://lzm420241.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="前端面试题" scheme="https://lzm420241.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>5.图层的高级操作</title>
    <link href="https://lzm420241.github.io/2017/05/20/design/ps-5/"/>
    <id>https://lzm420241.github.io/2017/05/20/design/ps-5/</id>
    <published>2017-05-20T14:53:47.000Z</published>
    <updated>2018-04-23T06:04:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图层的设置"><a href="#图层的设置" class="headerlink" title="图层的设置"></a>图层的设置</h3><ol>
<li>图层控制面板中可以设置不透明度</li>
<li>混合模式用来控制当前图层中的像素与它下面图层中的像素如何混合，除背景图层外，其他图层都支持混合，另外用于混合通道</li>
</ol>
<h3 id="填充图层"><a href="#填充图层" class="headerlink" title="填充图层"></a>填充图层</h3><ol>
<li>图层➡新建填充图层➡纯色 或单机图层面板中创建新的填充或调整图层按钮，选择纯色</li>
<li>渐变填充图层 图层➡新建填充图层➡渐变或者创建新的填充或调整图层按钮，选择渐变</li>
</ol>
<h3 id="调整图层"><a href="#调整图层" class="headerlink" title="调整图层"></a>调整图层</h3><ol>
<li>图层➡调整 调整命令直接修改所选图层中的像素数据，但调整图层中国年可以达到同样的调整效果但不会修改像素</li>
<li>图层➡新建调整图层 可在图层面板中创建调整图层</li>
</ol>
<h3 id="中性色涂层"><a href="#中性色涂层" class="headerlink" title="中性色涂层"></a>中性色涂层</h3><ol>
<li>使用色阶或曲线校正偏色的照片，通过定义灰色来校正色偏</li>
</ol>
<h3 id="智能对象"><a href="#智能对象" class="headerlink" title="智能对象"></a>智能对象</h3><ol>
<li>智能对象是一个嵌入到当前文档中的文件，它可以包含图像，也可以包含矢量图形</li>
<li>文件➡打开为智能对象 创建智能对象，文件➡置入 将另外一个文件作为智能对象置入到当前文档中</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;图层的设置&quot;&gt;&lt;a href=&quot;#图层的设置&quot; class=&quot;headerlink&quot; title=&quot;图层的设置&quot;&gt;&lt;/a&gt;图层的设置&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;图层控制面板中可以设置不透明度&lt;/li&gt;
&lt;li&gt;混合模式用来控制当前图层中的像素与它下面图层中的像素如
    
    </summary>
    
      <category term="设计知识点记录" scheme="https://lzm420241.github.io/categories/%E8%AE%BE%E8%AE%A1%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="design" scheme="https://lzm420241.github.io/tags/design/"/>
    
      <category term="photoshop" scheme="https://lzm420241.github.io/tags/photoshop/"/>
    
  </entry>
  
  <entry>
    <title>4.图层</title>
    <link href="https://lzm420241.github.io/2017/05/19/design/ps-4/"/>
    <id>https://lzm420241.github.io/2017/05/19/design/ps-4/</id>
    <published>2017-05-19T14:21:28.000Z</published>
    <updated>2018-04-23T06:04:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是图层"><a href="#什么是图层" class="headerlink" title="什么是图层"></a>什么是图层</h3><ol>
<li>图层就如同堆叠在一起的透明纸，每一张纸上都保存着不同的图像。我们可以透过上面图层的透明区域看到下面层的图像</li>
<li>图层面板含有：选取图层类型，打开／关闭图层过滤，设置图层的混合模式，设置图层的不透明度，设置填充不透明度，图层锁定按钮，图层链接图标</li>
</ol>
<h3 id="新建图层"><a href="#新建图层" class="headerlink" title="新建图层"></a>新建图层</h3><ol>
<li>点击图层面板中心间图层按钮即在当前图层上面新建一个图层，按住Ctrl键然后点击图层即可在当前图层下面新建图层–图层➡新建➡图层</li>
<li>如果在图像中创建了选区，通过图层➡新建➡通过拷贝的图层或按下Ctrl+J的方式将选区的图层拷贝到当前图层上面，剪切为Shift+Ctrl+J</li>
<li>如果没有背景图层，那么通过图层➡新建➡背景图层来将选中图层转为背景图层</li>
</ol>
<h3 id="编辑图层"><a href="#编辑图层" class="headerlink" title="编辑图层"></a>编辑图层</h3><ol>
<li>选择所有图层-选择➡所有图层，选择链接图层-图层➡选择链接图层，取消选择图层-选择➡取消选择图层</li>
<li>图层➡重命名图层</li>
<li>锁定图层：锁定透明度像素，锁定图像像素，锁定位置，锁定全部</li>
<li>查找图层：选择➡查找图层</li>
<li>删除图层：图层➡删除</li>
<li>栅格化图层内容-如果要使用绘画工具和滤镜编辑文字图层，形状图层，矢量蒙版，让图层内容转化为光栅图像，才能进行编辑 图层➡栅格化</li>
<li>清除图像的杂边 图层➡修边</li>
</ol>
<h3 id="排列与分布图层"><a href="#排列与分布图层" class="headerlink" title="排列与分布图层"></a>排列与分布图层</h3><ol>
<li>图层➡排列 置为顶层，前移一层／后移一层，置为底层，反向</li>
<li>图层➡对齐，图层➡对齐➡顶边</li>
<li>分布图层：图层➡分布➡水平居中</li>
<li>将图层与选区对齐：图层➡将图层与选区对齐</li>
</ol>
<h3 id="合并与盖印图层"><a href="#合并与盖印图层" class="headerlink" title="合并与盖印图层"></a>合并与盖印图层</h3><ol>
<li>合并图层：图层➡合并图层，图层➡向下合并，快捷键Ctrl+E，图层➡合并可见图层，快捷键Shift+Ctrl+E</li>
<li>将图层合并到背景中：图层➡拼合图像</li>
<li>盖印是将多个图层中图像合并到一个新的图层中，同时保持其他图层完好无损，向下盖印快捷键Ctrl+ALt+E，盖印多个图层-选择多个图层，按下Ctrl+Alt+E，盖印可见图层，盖印图层组</li>
</ol>
<h3 id="用图层组管理图层"><a href="#用图层组管理图层" class="headerlink" title="用图层组管理图层"></a>用图层组管理图层</h3><ol>
<li>创建图层组：点击图层面板中的文件夹图标或图层➡新建➡组</li>
<li>从所选图层中创建图层组：图层➡图层编组或Ctrl+G</li>
<li>取消图层组，但保留图层可选择该图层组，执行图层➡取消图层编组或Shift+Ctrl+G，如果要删除整个图层组将其移入图层面板的删除图标</li>
</ol>
<h3 id="图层样式"><a href="#图层样式" class="headerlink" title="图层样式"></a>图层样式</h3><ol>
<li>添加图层样式：1.图层➡图层样式 选择一个有效的命令；2.可以在图层面板中点击图层样式按钮</li>
<li>图层样式对话框中的效果名称前面的复选框如果选中则可以停用该效果，但保留效果参数</li>
<li>斜面和浮雕：对图层添加高光和阴影的各种组合，使图层呈现立体的浮雕效果</li>
<li>描边：可以使用颜色，渐变或图案描画对象的轮廓，它对于硬边形状，如文字特别有用</li>
<li>内阴影：在紧靠图层内容的边缘内添加阴影，使图层内容产生凹陷效果</li>
<li>内发光：沿图层内容的边缘向内创建发光效果</li>
<li>光泽： 应用光滑光泽的内部阴影，通常用来创建金属表面的光泽外观</li>
<li>颜色叠加：在图层上叠加指定的颜色，通过设置颜色的混合模式和不透明度，可以控制叠加效果</li>
<li>渐变叠加：在图层上叠加指定的渐变颜色</li>
<li>图案叠加：在图层上叠加指定的图案并且可以缩放图案，设置图案的不透明度和混合模式</li>
<li>外发光：沿图层内容的边缘向外创建发光效果</li>
<li>投影：为图层内容添加阴影</li>
</ol>
<h3 id="编辑图层样式"><a href="#编辑图层样式" class="headerlink" title="编辑图层样式"></a>编辑图层样式</h3><ol>
<li>显示与隐藏-图层面板中点击眼睛图标可以显示或者隐藏图层</li>
<li>修改效果-双击图层一个效果名称可以打开图层样式对话框，并且可以修改样式参数</li>
<li>复制，粘贴与清除效果-图层➡图层样式➡拷贝图层样式 复制图层样式，粘贴图层样式-图层➡图层样式➡粘贴图层样式</li>
<li>移动图层样式-按住Alt键，然后将图层fx移动到另外一个图层达到移动效果</li>
<li>如果要删除图层样式，将其移动到图层面板中的垃圾桶图标</li>
<li>使用全局光-在图层样式中，投影，内阴影，斜面和浮雕都包含全局光，选择此选项后，以上效果都会使用相同角度的光源</li>
<li>使用等高线-投影，内阴影，内发光，外发光，斜面和浮雕，光泽都包含等高线设置选项，等高线可以选择一个预设的等高线样式</li>
</ol>
<h3 id="使用样式面板"><a href="#使用样式面板" class="headerlink" title="使用样式面板"></a>使用样式面板</h3><ol>
<li>选择一个图层，点击样式面板中一个样式，既可为其添加样式</li>
<li>创建样式，删除样式 样式面板底部有创建样式和删除样式的图标</li>
<li>存储样式库，载入样式库</li>
</ol>
<h3 id="图层复合"><a href="#图层复合" class="headerlink" title="图层复合"></a>图层复合</h3><ol>
<li>图层复合面板用来创建，编辑，显示和删除图层复合</li>
<li>窗口➡图层复合 打开图层复合窗口</li>
<li>图层复合时面板状态的快照，它记录当前文档图层的可见性，位置和外观，通过图层复合可以快速在文档中切换不同版面的显示状态，比较适合多种设计方案</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是图层&quot;&gt;&lt;a href=&quot;#什么是图层&quot; class=&quot;headerlink&quot; title=&quot;什么是图层&quot;&gt;&lt;/a&gt;什么是图层&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;图层就如同堆叠在一起的透明纸，每一张纸上都保存着不同的图像。我们可以透过上面图层的透明区域看到下面层的图
    
    </summary>
    
      <category term="设计知识点记录" scheme="https://lzm420241.github.io/categories/%E8%AE%BE%E8%AE%A1%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="design" scheme="https://lzm420241.github.io/tags/design/"/>
    
      <category term="photoshop" scheme="https://lzm420241.github.io/tags/photoshop/"/>
    
  </entry>
  
  <entry>
    <title>3.选区</title>
    <link href="https://lzm420241.github.io/2017/05/18/design/ps-3/"/>
    <id>https://lzm420241.github.io/2017/05/18/design/ps-3/</id>
    <published>2017-05-18T15:25:13.000Z</published>
    <updated>2018-04-23T06:04:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="认识选区"><a href="#认识选区" class="headerlink" title="认识选区"></a>认识选区</h3><ol>
<li>选区分为两种:普通选区和羽化的选区</li>
<li>选择和抠图的几种方法：1.基本形状选择法；2.色调差异选择法；3.快速蒙版选择法；4.简单选区细化法；5.钢笔工具选择法；6.通道选择法；7.插件选择法；</li>
</ol>
<h3 id="选区的基本操作"><a href="#选区的基本操作" class="headerlink" title="选区的基本操作"></a>选区的基本操作</h3><ol>
<li>全选与反选 选择➡全部或Ctrl+A可以选择当前文件全部图像</li>
<li>复制选区 快捷键Ctrl+C可复制整个图像 如果文档中有多个图层可按下Shift+Ctrl+C</li>
<li>反选 选择➡反向或Shift+Ctrl+I可执行反选</li>
<li>取消选择分区 选择➡取消选择或Ctrl+D可以取消选择，如果要重新选择可以执行选择➡重新选择</li>
<li>选区运算 在工具选项栏中有：新选区，与选区交叉，添加到选区，从选区中减去，与选区这四种运算</li>
<li>如果当前有选区可以使用选框，套索，魔棒工具继续选区，按住Shift可以在当前选区添加选区，等同上</li>
<li>移动选区 隐藏与显示选区 执行视图➡显示➡选区边缘或Ctrl+H可以隐藏选区</li>
<li>选区工具：矩形选区，椭圆选区，单行选区工具，单列选区工具，套索工具，多边形套索工具，磁性套索工具</li>
</ol>
<h3 id="魔棒与快速选择工具"><a href="#魔棒与快速选择工具" class="headerlink" title="魔棒与快速选择工具"></a>魔棒与快速选择工具</h3><ol>
<li>魔棒工具和快速选择工具是基于色调和颜色差异来构建选区的工具</li>
<li>魔棒工具和快速选择工具的工具选项栏</li>
</ol>
<h3 id="“色彩范围”命令"><a href="#“色彩范围”命令" class="headerlink" title="“色彩范围”命令"></a>“色彩范围”命令</h3><ol>
<li>选择➡色彩范围 对话框中有选区预览图，选择-取样颜色，选区预览，检测人脸，反相等。</li>
</ol>
<h3 id="快速蒙版"><a href="#快速蒙版" class="headerlink" title="快速蒙版"></a>快速蒙版</h3><ol>
<li>快速蒙版是一种选区的转换工具，他能将选区转换为一种临时的蒙版图像，这样能通过画笔，滤镜，钢笔等工具编辑蒙版，之后再将蒙版图像转换选区</li>
<li>选择➡在快速蒙版模式下编辑 工具栏底部有快速蒙版编辑工具</li>
</ol>
<h3 id="细化选区"><a href="#细化选区" class="headerlink" title="细化选区"></a>细化选区</h3><ol>
<li>选择➡调整边缘</li>
</ol>
<h3 id="选区的编辑操作"><a href="#选区的编辑操作" class="headerlink" title="选区的编辑操作"></a>选区的编辑操作</h3><ol>
<li>选择➡修改➡边界 可以将选区的边界向内部和外部扩展</li>
<li>选择➡修改➡平滑 让选区更加平滑</li>
<li>选择➡修改➡扩展／收缩 扩展／收缩选区范围</li>
<li>选择➡修改➡羽化 选区羽化，且控制羽化范围</li>
<li>选择➡变换选区 对选区应用进行变换</li>
<li>存储选区–单机通道面板底部将选区存储为通道按钮，将选区保存在Alpha通道中</li>
<li>选择➡存储选区 也可以存储选区</li>
<li>选择➡载入选区 即可载入选区，或者按住Ctrl单击通道缩览图</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;认识选区&quot;&gt;&lt;a href=&quot;#认识选区&quot; class=&quot;headerlink&quot; title=&quot;认识选区&quot;&gt;&lt;/a&gt;认识选区&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;选区分为两种:普通选区和羽化的选区&lt;/li&gt;
&lt;li&gt;选择和抠图的几种方法：1.基本形状选择法；2.色调差异选择
    
    </summary>
    
      <category term="设计知识点记录" scheme="https://lzm420241.github.io/categories/%E8%AE%BE%E8%AE%A1%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="design" scheme="https://lzm420241.github.io/tags/design/"/>
    
      <category term="photoshop" scheme="https://lzm420241.github.io/tags/photoshop/"/>
    
  </entry>
  
  <entry>
    <title>2.图像的基本编辑方法</title>
    <link href="https://lzm420241.github.io/2017/05/17/design/ps-2/"/>
    <id>https://lzm420241.github.io/2017/05/17/design/ps-2/</id>
    <published>2017-05-17T14:37:31.000Z</published>
    <updated>2018-04-23T06:04:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><ol>
<li>Ctrl+N快速新建文件  文件➡新建</li>
<li>Ctrl+O打开文件</li>
<li>图层➡图层样式➡外发光可以调节光晕</li>
<li>文件➡导入可以导入视频帧和WIA等内容</li>
<li>Ctrl+S可以保存文件</li>
<li>Ctrl+W可以关闭文件</li>
</ol>
<h3 id="在图像中添加版权信息"><a href="#在图像中添加版权信息" class="headerlink" title="在图像中添加版权信息"></a>在图像中添加版权信息</h3><ol>
<li>文件➡文件简介可以添加版权信息</li>
<li>使用“嵌入水印”滤镜也可以在图像中加入版权信息</li>
</ol>
<h3 id="修改像素尺寸和画布大小"><a href="#修改像素尺寸和画布大小" class="headerlink" title="修改像素尺寸和画布大小"></a>修改像素尺寸和画布大小</h3><ol>
<li>图像➡图像大小 命令可以设置图像大小</li>
<li>图像大小弹出窗中可以设置文档大小，当缩小图像时会减少像素数量，但是画质不变，但是增大图像时，画质会下降</li>
<li>图像➡画布大小 调整画布的大小</li>
<li>图像➡图像旋转 旋转画布</li>
<li>图像➡复制 复制文档</li>
<li>编辑➡拷贝 拷贝文档 快捷键:Ctrl+C</li>
<li>编辑➡剪切 剪切文档</li>
<li>编辑➡粘贴 粘贴文档 快捷键:Ctrl+V</li>
<li>编辑➡选择性粘贴</li>
<li>编辑➡清楚 清楚选中的图像</li>
<li>编辑➡还原 撤销最后一次修改 快捷键:Ctrl+Z</li>
<li>编辑➡后退一步 可以后退上一步，编辑➡重做 可还原初始 快捷键:Shift+Ctrl+Z</li>
<li>文件➡恢复 直接将文件恢复到最后一次保存状态</li>
<li>tips—图像➡调整以及滤镜菜单中的滤镜，当我们修改参数时，若要还原默认值可以按住Alt键，对话框中的取消会变成复位</li>
</ol>
<h3 id="用历史记录面板进行还原操作"><a href="#用历史记录面板进行还原操作" class="headerlink" title="用历史记录面板进行还原操作"></a>用历史记录面板进行还原操作</h3><ol>
<li>窗口➡历史记录 可查看操作的历史记录</li>
<li>历史记录只能保存20步的操作步骤</li>
<li>若要增加步数可在 编辑➡首选项➡性能对话框中增加历史记录的保存步数，但是这样会占用很多内存</li>
<li>另外一种方式是绘制完重要的效果之后可在历史记录面板中点击快照按钮，将画面的当前状态保存为一个快照，按住Alt键然后点击快照按钮即可创建快照</li>
<li>删除快照–将快照移入删除按钮中</li>
<li>编辑➡清理 将菜单中的历史记录和全部命令会清除ps打开的所有文档</li>
</ol>
<h3 id="图像的变换和变形操作"><a href="#图像的变换和变形操作" class="headerlink" title="图像的变换和变形操作"></a>图像的变换和变形操作</h3><ol>
<li>编辑➡变换 可以对涂层，路径，矢量形状，以及选中的图像进行变换操作</li>
<li>移动工具选项栏中可以点击显示变换控件，即可变形图像</li>
<li>移动工具快速调入变换状态快捷键:Ctrl+T，变换图像，且复制出新的图像内容快捷键:Alt+Shfit+Ctrl+T</li>
<li>复制图层快捷键:Ctrl+J</li>
</ol>
<h3 id="内容识别比例缩放"><a href="#内容识别比例缩放" class="headerlink" title="内容识别比例缩放"></a>内容识别比例缩放</h3><ol>
<li>将背景图层转换普通图层快捷键:安装ALt然后双击图层</li>
<li>编辑➡内容识别比例</li>
<li>取消选取快捷键:Ctrl+D</li>
<li>用Alpha通道保护图像–在使用内容缩放时容易导致图像变形，为了保护部分地方不变形，选择受保护选取然后点击通道的蒙版，将选取保存为Alpha通道</li>
</ol>
<h3 id="操控变形"><a href="#操控变形" class="headerlink" title="操控变形"></a>操控变形</h3><ol>
<li>编辑➡操控变形 可以操控变形</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;新建文件&quot;&gt;&lt;a href=&quot;#新建文件&quot; class=&quot;headerlink&quot; title=&quot;新建文件&quot;&gt;&lt;/a&gt;新建文件&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Ctrl+N快速新建文件  文件➡新建&lt;/li&gt;
&lt;li&gt;Ctrl+O打开文件&lt;/li&gt;
&lt;li&gt;图层➡图层样式
    
    </summary>
    
      <category term="设计知识点记录" scheme="https://lzm420241.github.io/categories/%E8%AE%BE%E8%AE%A1%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="design" scheme="https://lzm420241.github.io/tags/design/"/>
    
      <category term="photoshop" scheme="https://lzm420241.github.io/tags/photoshop/"/>
    
  </entry>
  
  <entry>
    <title>你不知道javascript（上卷）知识点总结</title>
    <link href="https://lzm420241.github.io/2017/05/17/javascript/javascript/"/>
    <id>https://lzm420241.github.io/2017/05/17/javascript/javascript/</id>
    <published>2017-05-17T11:24:32.000Z</published>
    <updated>2018-04-23T06:02:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><ol>
<li>编译的三步骤:分词／词法分析，解析／语法分析，代码生成</li>
<li>javascript编译器工作过程:1.在当前作用域中声明一个变量（如果之前没有声明）；2.在运行时引擎会在作用域中查找该变量，如果能够找到变量就会对它赋值</li>
<li>编译器查找变量的方法是通过LHS查询和RHS查询，当变量出现在赋值操作的左侧时执行LHS查询，当赋值出现在右侧时进行的是RHS查询</li>
<li>当一个块或函数嵌套在另一个块或函数时，就发生了作用域的嵌套，因此，在当前作用域中无法找到某个变量时，引擎会在外层作用域中查找，直到找到该变量，或抵达最外层作用域停止</li>
<li>在非严格模式下，如果通过RHS查询无法查询到变量，但是通过LHS查询时如果不存在这个变量会自动声明这个变量，在严格模式下两者查询模式都是不行的 </li>
</ol>
<h4 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h4><ol>
<li>作用域共有两种工作模型:1.词法作用域；2.动态作用域</li>
<li>词法作用域就是定义在词法阶段的作用域</li>
<li><p>欺骗词法的两种机制(非常影响性能):<br>1.eval函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码，严格模式的声明是无法修改所在的作用域    </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">str, a</span>)</span>&#123;</div><div class="line">    <span class="built_in">eval</span>(str);  <span class="comment">//欺骗</span></div><div class="line">    <span class="built_in">console</span>.log(a, b);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line">foo(<span class="string">"var b = 3;"</span>, <span class="number">1</span>) <span class="comment">//1,3</span></div></pre></td></tr></table></figure>
<p>2.with关键字通常被当作重复引用同一个对象中的多个属性的快捷方式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">a</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">b</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">c</span>: <span class="number">3</span></div><div class="line">&#125;</div><div class="line">obj.a = <span class="number">2</span>;</div><div class="line">obj.b = <span class="number">3</span>;</div><div class="line">obj.c = <span class="number">4</span>;</div><div class="line"><span class="comment">//简单的快捷方式</span></div><div class="line"><span class="keyword">with</span>(obj)&#123;</div><div class="line">    a = <span class="number">3</span>;</div><div class="line">    b = <span class="number">4</span>;</div><div class="line">    c = <span class="number">5</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="函数作用域和块作用域"><a href="#函数作用域和块作用域" class="headerlink" title="函数作用域和块作用域"></a>函数作用域和块作用域</h4><ol>
<li>函数会被当作函数表达式而不是一个标准的函数声明来处理</li>
<li>width，try／catch中的catch都是块作用域中例子</li>
</ol>
<h4 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h4><ol>
<li>包含变量和函数在内的所有声明都会在任何代码被执行前首先被处理</li>
<li>只有声明本身会被提升，而赋值或其他运行逻辑会留在原地。如果提升该拜年了代码的顺序，会造成严重的破坏</li>
<li>函数声明会被提升，但是函数表达式却不会被提升</li>
<li>函数会首先被提升，然后才是变量</li>
<li>代码执行会经过两个阶段任务:1.编译阶段的人物；2.执行阶段任务</li>
</ol>
<h4 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h4><ol>
<li>无论通过任何手段将内部函数传递到所在的词法作用域以外，他都会持有对原始定义作用域的引用，无论在何处执行这个函数都是使用闭包</li>
<li>当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时就产生了闭包</li>
</ol>
<h4 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h4><ol>
<li>词法作用域是在写代码或者说定义时确定的，而动态作用域是在运行时确定的，词法作用域关注函数在何处声明，动态作用域关注函数从何处调用</li>
</ol>
<h3 id="this和对象原型"><a href="#this和对象原型" class="headerlink" title="this和对象原型"></a>this和对象原型</h3><h4 id="关于this"><a href="#关于this" class="headerlink" title="关于this"></a>关于this</h4><ol>
<li>arguments.callee目前唯一一种从匿名函数对象内部引用自身的方法</li>
<li>this是在运行时调用的，并不是在编写时绑定的。这个记录会包含函数在哪里被调用，函数的调用方法，传入参数等信息。this就是记录的其中一个属性，会在函数执行的过程中用到</li>
<li>this实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用</li>
</ol>
<h4 id="this全面解析"><a href="#this全面解析" class="headerlink" title="this全面解析"></a>this全面解析</h4><ol>
<li>调用位置:函数在代码中被调用的位置，而不是声明的位置</li>
<li>查看绑定规则:1.默认绑定；2.隐式绑定；3.显式绑定（call和apply）；4.new绑定</li>
<li>四种绑定的优先级:new绑定&gt;显示绑定&gt;隐式绑定&gt;默认绑定</li>
<li>将null和undefined通过call或apply传入函数实际等价于默认绑定</li>
<li>软绑定➡如果给默认绑定指定一个全局对象和undefined以外的值，那就可以和硬绑定相同的效果，同时保留隐式绑定或者显示绑定修改this的能力</li>
<li></li>
</ol>
<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ol>
<li>对象可以通过声明形式和构造形式定义</li>
<li>六种类型:string，number，boolean，null，undefined，object</li>
<li>对象子类型:String，Number，Boolean，Object，Function，Array，Date，RegExp，Error</li>
<li>在对象中属性名永远都是字符串，如果使用了string以外的值，那么它首先会转化为字符串</li>
<li>函数和方法本质是等价的，唯一不同的是方法里面使用的this会隐式指向对象</li>
<li>浅复制即对值的引用，深复制会复制其相关联的元素</li>
<li>object.assign实现浅复制</li>
<li><p>通过object.defineProperty来添加一个新属性或者修改一个已有的属性，并对特性进行设置     </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObj = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(myObj, <span class="string">"a"</span>, &#123;</div><div class="line">    <span class="attr">value</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>禁用扩展 Object.preventExtensions</p>
</li>
<li>密封 Object.seal 不可重新配置也不可删除任何现有属性</li>
<li>冻结 Object.freeze 对象上最高级别的不可用性</li>
<li>Object.hasOwnProperty检查属性是否存在对象中</li>
<li>Object.propertyIsEnumerable检查给定属性名是否直接存在于对象中，Object.keys返回可枚举属性的数组，Object.getOwnPropertyNames 返回一个数组，包含所有属性</li>
<li>forEach遍历数组的所有值，并忽略回调函数的返回值</li>
<li>every（）和some（）中特殊的返回值类似for里面的break</li>
<li>for…of..会寻找内置或者自定义的@@iterator对象并调用它的next（）方法来遍历数据值</li>
</ol>
<h4 id="混合对象“类”"><a href="#混合对象“类”" class="headerlink" title="混合对象“类”"></a>混合对象“类”</h4><ol>
<li>面向类的设计模式：实例化，继承，多台</li>
<li>多态是说父类的通用行为可以被子类更特殊的行为重写</li>
<li><p>类实例由一个特殊的方法构造，成为构造函数，这个方法的任务就是初始化实例需要的所有信息  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoolGuy</span> </span>&#123;</div><div class="line">    specialTrick = nothing;</div><div class="line">    CoolGuy(trick) &#123;</div><div class="line">        specialTrick = trick;</div><div class="line">    &#125;</div><div class="line">    showOff()&#123;</div><div class="line">        output(<span class="string">"Here's my trick: "</span>, specialTrick)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Joe = <span class="keyword">new</span> CoolGuy(<span class="string">"jumping rope"</span>);</div><div class="line">Joe.showOff();</div></pre></td></tr></table></figure>
</li>
<li><p>javascript本身不提供多重继承，但是可以通过各种办法来实现多重继承</p>
</li>
<li>模拟类的复制：显示和隐式</li>
<li><p>显示混入实现类似于extend </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixin</span>(<span class="params"> sourceObj, targetObj</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> sourceObj)&#123;</div><div class="line">        <span class="keyword">if</span>(!(key <span class="keyword">in</span> targetObj))&#123;</div><div class="line">            targetObj[key] = sourceObj[key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> targetObj;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Vehicle = &#123;</div><div class="line">    <span class="attr">engine</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">ignition</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Turning on my engine"</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">drive</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ignition();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Steering and moving forward"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> Car = mixin(Vehicle, &#123;</div><div class="line">    <span class="attr">wheels</span>: <span class="number">4</span>,</div><div class="line">    <span class="attr">drive</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        Vehicle.drive.call(<span class="keyword">this</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Rolling on all"</span> + <span class="keyword">this</span>.wheels + <span class="string">"whells"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>隐式混入    </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoolGuy</span> </span>&#123;</div><div class="line">    specialTrick = nothing;</div><div class="line">    CoolGuy(trick) &#123;</div><div class="line">        specialTrick = trick;</div><div class="line">    &#125;</div><div class="line">    showOff()&#123;</div><div class="line">        output(<span class="string">"Here's my trick: "</span>, specialTrick)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Joe = <span class="keyword">new</span> CoolGuy(<span class="string">"jumping rope"</span>);</div><div class="line">Joe.showOff();</div></pre></td></tr></table></figure>
</li>
<li><p>javascript本身不提供多重继承，但是可以通过各种办法来实现多重继承</p>
</li>
<li>模拟类的复制：显示和隐式</li>
<li><p>显示混入实现类似于extend </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Something = &#123;</div><div class="line">    <span class="attr">cool</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.greeting = <span class="string">"hello, world"</span>;</div><div class="line">        <span class="keyword">this</span>.count = <span class="keyword">this</span>.count?<span class="keyword">this</span>.count+<span class="number">1</span>:<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Something.cool();</div><div class="line">Something.greeting;</div><div class="line">Something.count;</div><div class="line"><span class="keyword">var</span> Another = &#123;</div><div class="line">    <span class="attr">cool</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        Something.cool.call(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Another.cool();</div><div class="line">Another.greeting;</div><div class="line">Another.count;</div></pre></td></tr></table></figure>
</li>
<li><p>类意味着复制</p>
</li>
</ol>
<h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><ol>
<li>javascript中的对象有一个特殊的[[prototype]]内置属性，其实就是对于其他对象的引用</li>
<li>所有的普通[[prototype]]链都会指向内置的object.prototype</li>
<li>所有的函数类默认都会拥有一个名为prototype的公有并且不可枚举的属性，它指向另一个对象</li>
<li>javascript不能创建一个类的多个实例，只能创建多个对象，他们关联到同一个对象</li>
<li>new会劫持所有普通函数并且用构造对象的形式来调用它</li>
</ol>
<h4 id="行为委托"><a href="#行为委托" class="headerlink" title="行为委托"></a>行为委托</h4><ol>
<li>如果在第一个对象上没有找到需要的属性或者方法引用，引擎就会继续在关联的对象上进行查找，如果后者还是没找到则会继续查找他的prototype，这一系列对象的链接称为“原型链”</li>
<li>委托行为意味着某些对象在找不到属性或者方法引用时会把这个请求委托给另一个对象</li>
<li>无法在两个或者两个以上相互为多的对象之间创建循环委托</li>
<li>Object.create()方法使用指定的原型对象和其属性创建了一个新的对象</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;作用域和闭包&quot;&gt;&lt;a href=&quot;#作用域和闭包&quot; class=&quot;headerlink&quot; title=&quot;作用域和闭包&quot;&gt;&lt;/a&gt;作用域和闭包&lt;/h3&gt;&lt;h4 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域
    
    </summary>
    
      <category term="前端知识点总结" scheme="https://lzm420241.github.io/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="javascript" scheme="https://lzm420241.github.io/tags/javascript/"/>
    
      <category term="你不知道的javascript" scheme="https://lzm420241.github.io/tags/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript/"/>
    
  </entry>
  
  <entry>
    <title>1.ps基本操作</title>
    <link href="https://lzm420241.github.io/2017/05/17/design/building-basic-task-for-photoshop/"/>
    <id>https://lzm420241.github.io/2017/05/17/design/building-basic-task-for-photoshop/</id>
    <published>2017-05-16T16:04:10.000Z</published>
    <updated>2018-04-23T06:07:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ps基本工作界面"><a href="#ps基本工作界面" class="headerlink" title="ps基本工作界面"></a>ps基本工作界面</h3><ol>
<li>界面分为菜单栏，工具选项栏，工具箱，选项卡，文档窗口，面板这几部分</li>
<li>文档窗口:<strong>ctrl+Tab快捷键可切换界面</strong></li>
<li>工具箱分为选择工具，裁剪和切片，测量工具，修饰工具，绘画工具，导航工具等几种类别工具</li>
</ol>
<h3 id="查看图像"><a href="#查看图像" class="headerlink" title="查看图像"></a>查看图像</h3><ol>
<li>工具箱底部的屏幕模式按钮可查看标准屏幕，全屏模式，菜单栏的全屏模式</li>
<li>在多个窗口查看图像可在<strong>窗口&gt;排列</strong>中选择哪种展示方式</li>
<li>旋转视图工具可旋转画布<strong>在工具栏中使用旋转工具</strong></li>
<li>在工具栏中使用缩放工具来调整窗口比例<strong>按住Alt键可缩小窗口</strong></li>
<li>在工具栏中用抓手工具移动画面<strong>Alt键缩小窗口，command键放大窗口，按住H键然后单击鼠标会显示全部图像，并且出现一个矩形框，放开H键和鼠标可移动到某块区域</strong></li>
<li>在<strong>窗口&gt;导航器</strong>中查看图像，<strong>通过扩大和缩小来查看图片，右键点击图像以外的暂存区可选择背景颜色</strong></li>
<li>在<strong>窗口&gt;工作区</strong>使用预设工作区</li>
<li>在菜单栏中的<strong>编辑&gt;菜单</strong>中打开键盘快捷键合菜单，<strong>点击菜单tab可定义菜单中各种颜色，在键盘快捷键中可自定义快捷键</strong></li>
</ol>
<h3 id="使用辅助工具"><a href="#使用辅助工具" class="headerlink" title="使用辅助工具"></a>使用辅助工具</h3><ol>
<li>在<strong>视图&gt;标尺</strong>中使用标尺，在窗口左上角向右下方拉可以设置坐标原点</li>
<li>在标尺中可以拉出参考线，如果要删除参考线则拉到标尺里面就删除了</li>
<li>在<strong>视图&gt;显示&gt;网格</strong>中使用网格</li>
<li>在工具栏中使用注释工具可在图像中添加注释</li>
</ol>
<h3 id="附几个快捷键"><a href="#附几个快捷键" class="headerlink" title="附几个快捷键:"></a>附几个快捷键:</h3><ol>
<li>Ctrl+o可以快速打开文件</li>
<li>Ctrl++可以放大图片，Ctrl+-可以缩小图片</li>
<li>Ctrl+R可以打开标尺，再使用一次关闭标尺</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ps基本工作界面&quot;&gt;&lt;a href=&quot;#ps基本工作界面&quot; class=&quot;headerlink&quot; title=&quot;ps基本工作界面&quot;&gt;&lt;/a&gt;ps基本工作界面&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;界面分为菜单栏，工具选项栏，工具箱，选项卡，文档窗口，面板这几部分&lt;/li&gt;
&lt;
    
    </summary>
    
      <category term="设计知识点记录" scheme="https://lzm420241.github.io/categories/%E8%AE%BE%E8%AE%A1%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="design" scheme="https://lzm420241.github.io/tags/design/"/>
    
      <category term="photoshop" scheme="https://lzm420241.github.io/tags/photoshop/"/>
    
  </entry>
  
  <entry>
    <title>页面设计的四条原则</title>
    <link href="https://lzm420241.github.io/2017/05/15/design/page-design/"/>
    <id>https://lzm420241.github.io/2017/05/15/design/page-design/</id>
    <published>2017-05-15T13:18:05.000Z</published>
    <updated>2018-04-23T06:04:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网页设计四条原则"><a href="#网页设计四条原则" class="headerlink" title="网页设计四条原则"></a>网页设计四条原则</h3><p><strong>原则一:设计之对比色原则</strong></p>
<pre><code>主要目的是突出重点，将内容区分出来
</code></pre><p><strong>原则二:设计之对奇原则</strong>     </p>
<pre><code>主要是更好地展示网页信息，样式清晰,所有设计元素和页面上其他元素要有视觉上的练习
</code></pre><p><strong>原则三:设计之重复性原则</strong>    </p>
<pre><code>主要目的是保持整个页面统一的风格，各个页面的风格不会互相冲突
</code></pre><p><strong>原则四:设计之相似性原则</strong>    </p>
<pre><code>主要是将相似的元素放倒一起，这样使用户易于查找    
</code></pre><p><strong>附带</strong><a href="http://colorschemedesigner.com/csd-3.5/" target="_blank" rel="external">页面选色在线网站</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;网页设计四条原则&quot;&gt;&lt;a href=&quot;#网页设计四条原则&quot; class=&quot;headerlink&quot; title=&quot;网页设计四条原则&quot;&gt;&lt;/a&gt;网页设计四条原则&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;原则一:设计之对比色原则&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    
    </summary>
    
      <category term="设计知识点记录" scheme="https://lzm420241.github.io/categories/%E8%AE%BE%E8%AE%A1%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="design" scheme="https://lzm420241.github.io/tags/design/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客创建记录</title>
    <link href="https://lzm420241.github.io/2017/05/11/hello-world/"/>
    <id>https://lzm420241.github.io/2017/05/11/hello-world/</id>
    <published>2017-05-11T03:26:01.000Z</published>
    <updated>2018-04-23T06:11:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过hexo工具可以在github中搭建一个静态blog。本节中主要记录第一次如何在github中搭建整个静态blog。</p>
<h3 id="搭建github"><a href="#搭建github" class="headerlink" title="搭建github"></a>搭建github</h3><ol>
<li><a href="https://github.com/" target="_blank" rel="external">官网</a>中申请账号</li>
<li><a href="https://segmentfault.com/a/1190000002533334" target="_blank" rel="external">本地配置github</a></li>
</ol>
<h3 id="安装hexo，上传资源文件至github"><a href="#安装hexo，上传资源文件至github" class="headerlink" title="安装hexo，上传资源文件至github"></a>安装hexo，上传资源文件至github</h3><p>1.<strong>安装hexo</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<p>2.<strong>通过hexo生成blog基本文件</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init username.github.io</div></pre></td></tr></table></figure></p>
<p>3.<strong>配置blog中根目录的配置文件_config.yml及添加一些hexo的基本工具</strong><br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">修改_config.yml的配置文件  </div><div class="line">    修改site，导入个人基本信息</div><div class="line">    通过添加theme来使用其它主题的blog，并且在配置文件中修改theme</div><div class="line">    在theme中设置使用哪种评论工具目前duoshuo已经停止使用</div><div class="line">添加hexo的基本工具</div><div class="line">    hexo-deployer-git 向远程仓库导入文件的工具</div><div class="line">    hexo-generator-json-content 配置blog标题的基本信息</div><div class="line">    hexo-generator-sitemap  添加sitemap，使得搜索引擎快速找到blog</div><div class="line">    hexo-generator-feed  添加rss</div></pre></td></tr></table></figure></p>
<p>4.<strong>生成blog资源文件</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure></p>
<p>5.<strong>上传到github</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<h3 id="hexo基本命令的使用"><a href="#hexo基本命令的使用" class="headerlink" title="hexo基本命令的使用"></a>hexo基本命令的使用</h3><p>1.<strong>新建文章</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure></p>
<p>2.<strong>本地测试blog项目</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure></p>
<p>3.<strong>发布草稿</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish [layout] title</div></pre></td></tr></table></figure></p>
<p>4.<strong>规范</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">将相应的文章放入对应的目录中，禁止采用自动生成文件的方式使用，但是目录采用自动生成</div><div class="line">目前采用hexo new aticle 实则生成一个目录和一个md文件，将写好文章放入目录里面</div></pre></td></tr></table></figure></p>
<p>5.<strong>更多关于hexo的使用，请点击<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">详情页</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过hexo工具可以在github中搭建一个静态blog。本节中主要记录第一次如何在github中搭建整个静态blog。&lt;/p&gt;
&lt;h3 id=&quot;搭建github&quot;&gt;&lt;a href=&quot;#搭建github&quot; class=&quot;headerlink&quot; title=&quot;搭建github
    
    </summary>
    
      <category term="知识点入门学习" scheme="https://lzm420241.github.io/categories/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="github" scheme="https://lzm420241.github.io/tags/github/"/>
    
      <category term="hexo" scheme="https://lzm420241.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
